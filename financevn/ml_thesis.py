# -*- coding: utf-8 -*-
"""ML_thesis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FbCN7YSgNOtNAi6OSDH6TZDM-3s36RTh
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import json
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVR
from sklearn.metrics import mean_squared_error

df = pd.read_csv('HPG_2017_1.csv')
df = df.sort_values(by='datetime').reset_index(drop=True)
# df = df.sort_index()
# display(df)

df_1 = df['price']

# df_1

import matplotlib.pyplot as plt
plt.xlabel('Time')
plt.ylabel('Price')
plt.title('Actual price of HPG')
plt.legend()
plt.xticks(rotation=45)
plt.plot(df_1)

import numpy as np

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))
df_1 = scaler.fit_transform(np.array(df_1).reshape(-1,1))

# df_1

##splitting dataset into train and test split
training_size = int(len(df_1)*0.7)
test_size = len(df_1) - training_size
train_data, test_data = df_1[0:training_size,:], df_1[training_size:len(df_1),:1]

# training_size, test_size

# train_data.shape, test_data.shape

# convert an array of values into a dataset matrix
def create_dataset(dataset, time_step=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-time_step-1):
		a = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100
		dataX.append(a)
		dataY.append(dataset[i + time_step, 0])
	return np.array(dataX), np.array(dataY)

# reshape into X=t,t+1,t+2,t+3 and Y=t+4
time_step = 150
X_train, y_train = create_dataset(train_data, time_step)
X_test, ytest = create_dataset(test_data, time_step)

# print(X_train.shape), print(y_train.shape)

# print(X_test.shape), print(ytest.shape)

# reshape input to be [samples, time steps, features] which is required for LSTM
X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

### Create the Stacked LSTM model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(150,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary()

model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)

import tensorflow as tf

### Lets Do the prediction and check performance metrics
train_predict=model.predict(X_train)
test_predict=model.predict(X_test)

##Transformback to original form
train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)

# train_predict.shape, test_predict.shape, df_1.shape

### Calculate RMSE performance metrics
import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(y_train,train_predict))

### Test Data RMSE
math.sqrt(mean_squared_error(ytest,test_predict))

# plot baseline and predictions
plt.figure(figsize=(8, 5))
plt.title("Stock Price Prediction using LSTM")
plt.xlabel("Time")
plt.ylabel("Stock Price")

plt.plot(scaler.inverse_transform(df_1[1548-314:]), label="Actual Stock Prices")
plt.plot(test_predict, label="Test Set Predictions", linestyle='dashed')
# Add legend
plt.legend()

plt.show()

# ### Plotting
# # shift train predictions for plotting
# look_back=150
# trainPredictPlot = np.empty_like(df_1)
# trainPredictPlot[:, :] = np.nan
# trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict
# # shift test predictions for plotting
# testPredictPlot = np.empty_like(df_1)
# testPredictPlot[:, :] = np.nan
# testPredictPlot[len(train_predict)+(look_back*2)+1:len(df_1)-1, :] = test_predict
# # plot baseline and predictions
# plt.plot(scaler.inverse_transform(df_1))
# plt.plot(trainPredictPlot)
# plt.plot(testPredictPlot)
# plt.show()


### Plotting
# shift train predictions for plotting
look_back = 150
trainPredictPlot = np.empty_like(df_1)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict

# shift test predictions for plotting
testPredictPlot = np.empty_like(df_1)
testPredictPlot[:, :] = np.nan
testPredictPlot[len(train_predict)+(look_back*2)+1:len(df_1)-1, :] = test_predict

# plot baseline and predictions
plt.figure(figsize=(10, 6))
plt.title("Stock Price Prediction using LSTM")
plt.xlabel("Time")
plt.ylabel("Stock Price")

# Plot the actual stock prices
plt.plot(scaler.inverse_transform(df_1), label="Actual Stock Prices", color='blue')

# Plot the training set predictions (dashed line)
plt.plot(trainPredictPlot, label="Training Set Predictions", color='green', linestyle='dashed', linewidth=1.5)

# Plot the test set predictions (dashed line)
plt.plot(testPredictPlot, label="Test Set Predictions", color='red', linestyle='dashed', linewidth=1.5)

# Add legend
plt.legend()

plt.show()

# test_data.shape

x_input=test_data[465-150:].reshape(1,-1)
# x_input.shape

temp_input=list(x_input)
temp_input=temp_input[0].tolist()

# temp_input

# demonstrate prediction for next 45 days
from numpy import array

lst_output=[]
n_steps=150
i=0
while(i<45):

    if(len(temp_input)>150):
        #print(temp_input)
        x_input=np.array(temp_input[1:])
        print("{} day input {}".format(i,x_input))
        x_input=x_input.reshape(1,-1)
        x_input = x_input.reshape((1, n_steps, 1))
        #print(x_input)
        yhat = model.predict(x_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.extend(yhat.tolist())
        i=i+1
    else:
        x_input = x_input.reshape((1, n_steps,1))
        yhat = model.predict(x_input, verbose=0)
        print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1


print(lst_output)

day_new=np.arange(1,151)
day_pred=np.arange(151,151+45)

# len(df_1)

# plot baseline and predictions
plt.figure(figsize=(8, 5))
plt.title("Stock Price Prediction using LSTM")
plt.xlabel("Time")
plt.ylabel("Stock Price")



plt.plot(day_new,scaler.inverse_transform(df_1[1548-150:]), label="Actual Stock Prices")
plt.plot(day_pred,scaler.inverse_transform(lst_output), label="Next 45 days prediction", linestyle='dashed')

# Add legend
plt.legend()

plt.show()

# time_begin = 1300 (total is 1548) -> muốn coi từ 1300 -> 1548 : 248 ngày
df3=df_1.tolist()
df3.extend(lst_output)
plt.figure(figsize=(8, 5))
plt.title("Stock Price Prediction using LSTM")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.plot(scaler.inverse_transform(df3[1300:]))